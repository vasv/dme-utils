#!/usr/bin/env python

import argparse
import sys

from argparse import RawTextHelpFormatter

from dme_utils import (
    get_endpoint_data,
    submit_transfer,
    get_task_status,
)

from helpers import TRANSFER_LABEL


def parse_options():
    parser = argparse.ArgumentParser(
        prog="rundme",
        description="""
        -- Globus utility for the Data Mobility Exhibition (DME)\n
        Submits Globus transfer requests using the standard datasets defined
        for the DME. The source and destination may be one of the DME endpoints
        or an endpoint of your choosing (but at least one must be a DME endpoint).\n
        The DME datasets and endpoints are defined on this page:
        https://www.globusworld.org/tour/data-mobility-exhibition""",
        formatter_class=RawTextHelpFormatter,
    )

    subparsers = parser.add_subparsers(title="Available commands", dest="command_name")

    # Create the parser for the "endpoints" command
    parser_endpoints = subparsers.add_parser(
        "endpoints", help="Display data on available DME endpoints."
    )

    # Create the parser for the "transfer" command
    parser_transfer = subparsers.add_parser(
        "transfer", help="Initiate a transfer between two endpoints."
    )
    parser_transfer.add_argument(
        "--dataset", required=True, help="DME dataset name, e.g. ds04"
    )
    parser_transfer.add_argument(
        "--source", type=int, help="DME source endpoint number"
    )
    parser_transfer.add_argument(
        "--non-dme-source",
        dest="nondmesource",
        help="Source is a non-DME endpoint; UUID provided by the user",
    )
    parser_transfer.add_argument(
        "--source-path",
        dest="sourcepath",
        help="Source path (only used with --non-dme-source)",
    )
    parser_transfer.add_argument(
        "--dest", type=int, help="DME destination endpoint number"
    )
    parser_transfer.add_argument(
        "--non-dme-dest",
        dest="nondmedest",
        help="Destination is a non-DME endpoint; UUID provided by the user",
    )
    parser_transfer.add_argument(
        "--dest-path",
        dest="destpath",
        help="Destination path (only used with --non-dme-dest)",
    )
    parser_transfer.add_argument(
        "--label",
        default=TRANSFER_LABEL,
        help=f"User friendly label for this transfer. Default: {TRANSFER_LABEL}",
    )

    # Create the parser for the "status" command
    parser_status = subparsers.add_parser(
        "status", help="Returns status of a DME transfer task."
    )
    parser_status.add_argument(
        "--task-id",
        dest="taskid",
        required=True,
        help='Globus transfer task ID (returned by "rundme transfer" command).',
    )

    args = parser.parse_args()

    # Ensure valid arguments state
    if args.command_name in ["transfer"]:
        if (args.nondmesource is not None) and (args.nondmedest is not None):
            print("Please specify at least one DME collection (source or destination)")
            sys.exit(1)
        if args.nondmesource and not args.sourcepath:
            print(f"--source-path must be specified for non-DME source endpoint")
            sys.exit(1)
        if args.nondmedest and not args.destpath:
            print(f"--dest-path must be specified for non-DME destination endpoint")
            sys.exit(1)
    elif args.command_name in ["endpoints", "status"]:
        pass
    else:
        parser.print_usage()
        sys.exit(1)

    if args.command_name == "endpoints":
        get_endpoint_data()

    elif args.command_name == "transfer":
        submit_transfer(args)

    elif args.command_name == "status":
        get_task_status(args)


# Get list of active DME endpoints
def main():
    parse_options()


if __name__ == "__main__":
    main()

### EOF
