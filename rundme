#!/usr/bin/env python

import json, sys, os, time, uuid, argparse
from argparse import RawTextHelpFormatter
import six

from globus_sdk import (NativeAppAuthClient, TransferClient,
                        RefreshTokenAuthorizer, TransferData)
from globus_sdk.exc import (GlobusAPIError, TransferAPIError)

from fair_research_login import NativeClient

import re
uuid_regex = "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$"
uuid_pattern = re.compile(uuid_regex)

TRANSFER_LABEL = f"DME Transfer submitted on {time.strftime('%Y-%m-%d', time.localtime(time.time()))}"

APP_NAME = 'DME Transfer Script'
CLIENT_ID = '27637bc2-defa-41df-b16b-561543dc1e7e'
REDIRECT_URI = 'https://auth.globus.org/v2/web/auth-code'
SCOPES = ('openid email profile '
          'urn:globus:auth:scope:transfer.api.globus.org:all '
          'urn:globus:auth:scope:groups.api.globus.org:all')

get_input = getattr(__builtins__, 'raw_input', input)

def load_data_from_file(filepath):
  # Load a set of saved tokens
  if not os.path.exists(filepath):
    return []
  with open(filepath, 'r') as f:
    data = json.load(f)

  return data


def save_data_to_file(filepath, key, data):
  # Save data to a file
  try:
    store = load_data_from_file(filepath)
  except:
    store = {}
  
  if len(store) > 0:
    store[key] = data
  with open(filepath, 'w') as f:
    json.dump(store, f)


def validate_endpoint_path(tc=None, endpoint=None, path=None):
  # Check the endpoint path exists
  try:
    tc.operation_ls(endpoint, path=path)
  except TransferAPIError as error:
    print(f"Failed to query endpoint {endpoint}: {error.message}")
    sys.exit(1)


def create_destination_directory(tc=None, dest_ep=None, dest_path=None):
  # Create the destination path if it does not exist
  try:
    tc.operation_ls(dest_ep, path=dest_path)
  except TransferAPIError:
    try:
      tc.operation_mkdir(dest_ep, dest_path)
      print(f"Created directory: {dest_path}")
    except TransferAPIError as error:
      print(f"Failed to start transfer: {error.message}")
      sys.exit(1)


def get_api_clients():
  tokens = None
  client = NativeClient(client_id=CLIENT_ID, app_name=APP_NAME)
  try:
    # if we already have tokens, load and use them
    tokens = client.load_tokens(requested_scopes=SCOPES)
  except:
    pass

  if not tokens:
    # if we need to get tokens, start the Native App authentication process
    tokens = client.login(requested_scopes=SCOPES, refresh_tokens=True)
    try:
      client.save_tokens(tokens)
    except:
      pass

  if tokens:
    # Instantiate Transfer client
    if tokens['transfer.api.globus.org']:
      try:
        authorizer = RefreshTokenAuthorizer(
          tokens['transfer.api.globus.org']['refresh_token'],
          NativeAppAuthClient(client_id=CLIENT_ID),
          access_token=tokens['transfer.api.globus.org']['access_token'],
          expires_at=tokens['transfer.api.globus.org']['expires_at_seconds'])
        transfer_client = TransferClient(authorizer=authorizer)
      except GlobusAPIError as error:
        print(f"Failed to create Transfer API client: {error.message}")
        sys.exit(1)
    else:
      print("Failed to get Transfer tokens - aborting.")
      sys.exit(1)

    # Instantiate Groups client
    if tokens['groups.api.globus.org']:
      try:
        # TODO: Create Groups API client
        groups_token = tokens['groups.api.globus.org']['access_token']
      except:
        pass
    else:
      print("Failed to get Groups tokens - aborting.")
      sys.exit(1)

  else:
    print("Failed to get Auth tokens - aborting.")
    sys.exit(1)

  return transfer_client, groups_token


def submit_transfer(tc, dataset, source_id, source_path, dest_id, dest_path, label):
  tdata = TransferData(tc, source_id, dest_id, label=label)
  tdata.add_item(source_path, dest_path, recursive=True)
  task = tc.submit_transfer(tdata)

  url_string = 'https://app.globus.org/app/file-manager?' + \
    six.moves.urllib.parse.urlencode({
      'origin_id': source_id,
      'origin_path': source_path,
      'destination_id': dest_id,
      'destination_path': dest_path})
  
  return task['task_id'], url_string


def get_dme_endpoint(endpoint_number):
  # Get DME endpoint UUID
  try:
    endpoint = next(ep for ep in DME_ENDPOINTS if int(ep["index"]) == endpoint_number)
  except StopIteration as error:
    print(f"DME endpoint #{endpoint_number} not found; ensure endpoint index exists in dme_data.json")
    sys.exit(1)

  return endpoint


def get_endpoint(source_dest=None, args=None):
  if (source_dest == "SOURCE"):
    if args.nondmesource:
      # Ensure non-DME endpoint is a valid UUID
      print(args.nondmesource)
      if bool(uuid_pattern.match(args.nondmesource)):
        endpoint_id = args.nondmesource
      else:
        print("Source endpoint ID is not a valid UUID - aborting.")
        sys.exit(1)
      path = args.sourcepath
    else:
      # Get source DME endpoint data
      dme_endpoint = get_dme_endpoint(endpoint_number=int(args.source))
      endpoint_id = dme_endpoint['id']
      path = dme_endpoint['paths']['source'] + args.dataset

  else:
    if args.nondmedest:
      # Ensure non-DME endpoint is a valid UUID
      if bool(uuid_pattern.match(args.nondmedest)):
        endpoint_id = args.nondmedest
      else:
        print("Destination endpoint ID is not a valid UUID - aborting.")
        sys.exit(1)
      path = args.destpath
    else:
      # Get destination DME endpoint data
      dme_endpoint = get_dme_endpoint(endpoint_number=int(args.dest))
      endpoint_id = dme_endpoint['id']
      if 'writable' in dme_endpoint:
        path = (dme_endpoint['paths']['dest'] \
          if ('dest' in dme_endpoint['paths']) else "") + \
         (args.destpath if args.destpath else uuid.uuid4())
      else:
        path = (args.destpath if args.destpath else uuid.uuid4())

  return endpoint_id, path


def parse_options():

  parser = argparse.ArgumentParser(prog='rundme',
    description='''
        Globus Transfer Utility for the Data Mobility Exhibition (DME)\n
        Submits Globus transfer requests using the standard datasets defined
        for the DME. The source and destination may be one of the DME endpoints
        or endpoints of your choosing.\n
        The DME datasets and endpoints are defined on this page:\n
        https://www.globusworld.org/tour/data-mobility-exhibition''', 
    formatter_class=RawTextHelpFormatter)

  subparsers = parser.add_subparsers(
    title='Available commands', 
    dest='command_name')

  # Create the parser for the "transfer" command
  parser_transfer = subparsers.add_parser('transfer',
    help="Lists subdomains whose name includes the filter text.")
  parser_transfer.add_argument('--dataset',
    required=True,
    help='DME dataset name, e.g. ds04')
  parser_transfer.add_argument('--source',
    type=int,
    help='DME source endpoint number')
  parser_transfer.add_argument('--non-dme-source',
    dest='nondmesource',
    help='Source is a non-DME endpoint; UUID provided by the user')
  parser_transfer.add_argument('--source-path', 
    dest='sourcepath',
    help='Source path (only used with --non-dme-source)')
  parser_transfer.add_argument('--dest',
    type=int,
    help='DME destination endpoint number')
  parser_transfer.add_argument('--non-dme-dest',
    dest='nondmedest',
    help='Destination is a non-DME endpoint; UUID provided by the user')
  parser_transfer.add_argument('--dest-path', 
    dest='destpath',
    help='Destination path (only used with --non-dme-dest)')
  parser_transfer.add_argument('--create-path', 
    dest='createpath',
    help='Create the destination folder if it does not already exist')  
  parser_transfer.add_argument('--label',
    default=TRANSFER_LABEL, 
    help=f'User friendly label for this transfer. Default: {TRANSFER_LABEL}')
  
  # Create the parser for the "status" command
  parser_status = subparsers.add_parser('status',
    help="Returns status of a DME transfer task.")
  parser_status.add_argument('--task-id',
    dest='taskid', required=True, 
    help='Globus transfer task ID (returned by "rundme transfer" command).')

  args = parser.parse_args()

  # Ensure valid arguments state
  if (args.command_name in ['transfer']):
    if args.nondmesource and not args.sourcepath:
      print(f"--source-path must be specified for non-DME source endpoint")
      sys.exit(1)
    if args.nondmedest and not args.destpath:
      print(f"--dest-path must be specified for non-DME destination endpoint")
      sys.exit(1)
  elif (args.command_name in ['status']):
    pass
  else:
    parser.print_usage()
    sys.exit(1)

  return args.command_name, args


# Get list of active DME endpoints
DME_ENDPOINTS = load_data_from_file('dme_data.json')

if __name__ == '__main__':
  
  # Get command line arguments
  command, args = parse_options()

  # Set up Transfer API client and Groups access token
  # TODO: Replace with Groups API client when available in SDK
  tc, groups_token = get_api_clients()

  if (command == 'transfer'):

    # Get endpoint ID and path
    source_endpoint_id, source_path = get_endpoint(source_dest="SOURCE", args=args)
    dest_endpoint_id, dest_path = get_endpoint(source_dest="DEST", args=args)

    print(f"Source endpoint ID: {tc.get_endpoint(source_endpoint_id)['display_name']}")
    print(f"Source path: {source_path}")
    print(f"Destination endpoint ID: {tc.get_endpoint(dest_endpoint_id)['display_name']}")
    print(f"Destination path: {dest_path}")

    # Check user's group membership in DME Endpoint Access

    # Autoactivate endpoints
    validate_endpoint_path(tc, source_endpoint_id, source_path)

    # Create destination folder, if required
    if (args.createpath):
      create_destination_directory(tc, dest_endpoint_id, args.destpath)
    else:
      validate_endpoint_path(tc, dest_endpoint_id, dest_path)

    try:
      tc.endpoint_autoactivate(source_endpoint_id)
      tc.endpoint_autoactivate(dest_endpoint_id)
    except GlobusAPIError as error:
      if error.http_status == 401:
        sys.exit(f"Refresh token has expired. Please delete the `tokens` \
          object from {DATA_FILE} and try again.")
      else:
        raise error

    task_id, url = submit_transfer(
      tc=tc,
      dataset=args.dataset,
      source_id=source_endpoint_id,
      source_path=source_path,
      dest_id=dest_endpoint_id,
      dest_path=dest_path,
      label=args.label if args.label else TRANSFER_LABEL)

    print(f"Submitted transfer: {task_id}")
    print(f"Get transfer details by running: ./rundme status --task-id {task_id}")
    print(f"Visit the link below to see the changes: {url}")

  elif (command == 'status'):
    task_details = tc.get_task(args.taskid)
    print(task_details)

### EOF
